@startuml

class Teacher
class CreateUpdateExamUI {
    +doshow()
}
class CreateUpdateExamController {
    +updateExam()
    +infoForExam()
    +createSection()
    +createQuestion()
    +getExam()
}
class PersistenceContext {
    -examRepository: ExamRepository
    -questionRepository: QuestionRepository
    +repositories()
}
class RepositoryFactory {
    +create()
}
class Header {
    -feedbackType
    -gradeType
    -description
    +createHeader()
}
enum FeedbackType {
  NONE
  ON_SUBMISSION
  AFTER_CLOSING
}

enum GradeType {
  NONE
  ON_SUBMISSION
  AFTER_CLOSING
}

enum QuestionType {
  MATCHING, MULTIPLE_CHOICE, SHORT_ANSWER, NUMERICAL, SELECT_MISSING_WORDS, TRUE_FALSE
}

class Builder {
    +create()
}
class SequenceSection {
    -sectionNumber
    -description
    -numberOfQuestions
    -listOfQuestions
    +addQuestion()
    +createSection()
    +addQuestionsToSection()
}
class Question {
    -question
    -solution
    -questionType
    +createQuestion()
}
class Exam {
    -id
    -course
    -title
    -header
    -startDate
    -endDate
    -listOfSections
    +createExam()
    +updateExam()
    +validateExam()
}
class ExamRepository {
    +save()
    +getExamsByCourse()
    +getExam()
}
class QuestionRepository {
    +save()
    +getQuestionByType()
}

Teacher --> CreateUpdateExamUI
CreateUpdateExamUI --> CreateUpdateExamController
CreateUpdateExamController --> PersistenceContext
CreateUpdateExamController --> SequenceSection
CreateUpdateExamController --> Question
CreateUpdateExamController --> Exam
CreateUpdateExamController --> Builder
PersistenceContext --> ExamRepository
PersistenceContext --> QuestionRepository
PersistenceContext --> RepositoryFactory
RepositoryFactory --> QuestionRepository
Builder --> Question
Builder --> Exam
CreateUpdateExamController --> ExamRepository
CreateUpdateExamController --> QuestionRepository
Exam --> SequenceSection
FeedbackType-->Header
GradeType-->Header
Header-->Exam
QuestionType-->Question

@enduml
