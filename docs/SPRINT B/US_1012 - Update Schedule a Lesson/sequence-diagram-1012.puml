@startuml
actor Teacher as Actor
participant UpdateScheduleLessonUI as UI <<presentation>>
participant UpdateScheduleLessonController as Controller <<aplication>>
participant Lesson as Domain <<domain>>
participant PersistenceContext as Persistence <<persistence>>
participant RepositoryFactory as Factory <<factory>>
database LessonRepository as Repository <<repository>>

Actor -> UI: Show()
UI -> Controller:listLessons()
Controller -> Persistence: repositories()
Persistence -> Factory: getRepositoryFactory()
Factory --> Controller
Controller -> Factory: Lessons()
Factory -> Repository: create()
Repository --> Controller
Controller -> Repository: ListAllLessons()
Repository --> Controller
Controller --> UI: ListAllLessons()
UI -> UI: ShowScheduleLessons()
UI --> Actor: Ask lesson to update
Actor -> UI: Select Lesson
UI --> Actor: Ask new schedule
Actor -> UI:new Schedule
UI-> Controller: UpdateScheduleLesson\n(Lesson,Schedule)
Controller -> Domain: UpdateSchedule(Schedule)
Controller -> Repository: save(Lesson)
Controller --> UI: Lesson
UI --> Actor: Show update lesson




@enduml