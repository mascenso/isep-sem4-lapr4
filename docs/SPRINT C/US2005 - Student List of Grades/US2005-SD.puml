@startuml
'https://plantuml.com/sequence-diagram

autonumber

actor Student as Actor
activate Actor
participant ListExamsUI as UI <<Presentation>>
control ListStudentExamGradesController as Controller <<Application>>
participant ListExamsService as Service <<Application>>
participant authorizationService as AuthService <<Application>>
participant PersistenceContext as Persistence <<persistence>>
database ExamsRepository as Repository <<Repository>>
participant "theExam:Exam" as Exam <<Domain>>
participant "theGradeOfExam:GradeOfExam" as GradeOfExam <<Domain>>
participant elementPrinter as Printer <<Presentation>>

Actor -> UI: Select the option \nto update Course state
activate UI
UI -> Controller: examOfLoggedStudent()
activate Controller
Controller -> Service: examOfLoggedStudent()
activate Service
Service -> AuthService: session.get().authenticatedUser()
activate AuthService
AuthService -> Service: loggedUser
deactivate AuthService
Service -> Persistence: findAll()
activate Persistence
Persistence -> Repository: findall()
activate Repository
Repository -> Persistence: Iterable<Exam>
deactivate Repository
Persistence -> Service: Iterable<Exam>
deactivate Persistence
    loop Iterable<Exam>
        Service -> Exam: exam.getExamGrades().stream().filter(grade -> grade.studentWhoDidExam().equals(loggedUser)).findFirst().orElse(null);
        activate Exam
        Exam -> GradeOfExam: grade.studentWhoDidExam().equals(loggedUser)
        deactivate Exam
        activate GradeOfExam
        GradeOfExam -> Service: GradeOfExam
        deactivate GradeOfExam
        Service -> Service: add(GradeOfExam)
    end
Service -> Controller: loggedStudentExams
deactivate Service
Controller -> UI: loggedStudentExams
deactivate Controller
UI -> Printer: elementPrinter()
activate Printer
Printer -> UI: Prints each element
deactivate Printer
UI -> Actor: Shows the Grade of each exam of the student
deactivate UI


@enduml